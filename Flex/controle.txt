Enter the filename: 
        #pragma omp target teams distribute parallel for collapse(2)
        for(size_t i = STENCIL_RADIUS; i < nz - STENCIL_RADIUS; i++) {
            for(size_t j = STENCIL_RADIUS; j < nx - STENCIL_RADIUS; j++) {
                for(size_t k = STENCIL_RADIUS; k < ny - STENCIL_RADIUS; k++) {
                    // index of the current point in the grid
                    size_t current = (i * nx + j) * ny + k;

                    // stencil code to update grid
                    double value = funcao(coefficient,0] ,*, (prev_funcao(u,current)
,/,dzSquared ,+, prev_funcao(u,current)
,/,dxSquared ,+, prev_funcao(u,current)
,/,dySquared);

                    ,/,,/, radius of the stencil
                    for(size_t ir = 1; ir <= STENCIL_RADIUS; ir,+,,+,){
                        value ,+,= funcao(coefficient,ir)
 ,*, (
                                ( (prev_funcao(u,current + ir)
 ,+, prev_funcao(u,current - ir)
) ,/, dySquared ) ,+, ,/,,/,neighbors in Y direction
                                ( (prev_funcao(u,current + (ir * ny)] + prev_funcao(u,current - (ir * ny)]) / dxSquared ) + //neighbors in X direction
                                ( (prev_funcao(u,current + (ir * nx * ny)] + prev_funcao(u,current - (ir * nx * ny)]) / dzSquared )); //neighbors in Z direction
                    }
                    value *= dtSquared * vel_funcao(model,current)
 * vel_funcao(model,current)
;
                    next_funcao(u,current)
 = 2.0 * prev_funcao(u,current)
 - next_funcao(u,current)
 + value;
                }
            }
        }