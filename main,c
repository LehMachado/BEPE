#include <stddef.h>
#include <stdlib.h>

#include <zephyr/settings/settings.h>
#include <zephyr/bluetooth/bluetooth.h>
#include <zephyr/bluetooth/hci.h>
#include <zephyr/bluetooth/conn.h>
#include <zephyr/bluetooth/uuid.h>
#include <zephyr/bluetooth/gatt.h>

#include <zephyr/drivers/gpio.h>
#include <zephyr/kernel.h>
#include "epaper.h"

#define SEARCHING_START_BYTE 0
#define RECEIVING_BYTE 1

// #define MAC_SIZE 12
#define IMAGE_BOOL_SIZE 1
#define TIME_SIZE 4
#define VND_LONG_MAX_LEN 74

struct esl{
	unsigned char checksum;  	// Atualmente o checksum é calculado apenas para a imagem
	
	struct led{
		int led:3;  		 	// Qual led será aceso
		uint8_t repeat;			// Quantas vezes será repetido
		short time;				// Tempo entre cada repetição
	} led_data;

	struct image{
		uint8_t image_recive;	// Seta para receber a imagem
		uint8_t image_clean;	// Limpa o display (passar image_recive como true para limpar)
		uint8_t image_compress;	// Se a imagem está comprimida
		uint8_t screem;			// Tamanho da imagem que será recebida 
		short int image_pos;	// Conta os caracteres recebidos

		struct compact{
			uint8_t pos[256];   // Posição
			uint8_t rep[256];   // Repetição 
			short number; 		// Numero de repetições
		}image_compact; 

	} image_data;
};

// Inicializa as variáveis globais
/*
	Obs: como a memória é pequena, não podemos fazer alocações dinâmicas
*/
struct esl esl_data; 
short pos = 0;
short count = 0;
unsigned char csum = 0x00;

struct bt_le_ext_adv *adv;

#define VND_MAX_LEN 20

/*
	Define um uuid para o serviço 

	obs: esse uuid não é um padrão, pode ser qualquer uuid desde que esteja alinhado com o gw
*/
#define BT_UUID_CUSTOM_SERVICE_VAL BT_UUID_128_ENCODE(0x12345678, 0x1234, 0x5678, 0x1234, 0x56789abcdef0)
static struct bt_uuid_128 vnd_uuid = BT_UUID_INIT_128(BT_UUID_CUSTOM_SERVICE_VAL);
static struct bt_uuid_128 vnd_enc_uuid = BT_UUID_INIT_128(BT_UUID_128_ENCODE(0x12345678, 0x1234, 0x5678, 0x1234, 0x56789abcdef1));
static const struct bt_uuid_128 vnd_long_uuid = BT_UUID_INIT_128(BT_UUID_128_ENCODE(0x12345678, 0x1234, 0x5678, 0x1234, 0x56789abcdef3));

//Variável para passagem do advertising
static uint8_t mfg_data[] = { 0xff, 0xff, 0x02 };

#define ADV_PARAM BT_LE_ADV_PARAM(BT_LE_ADV_OPT_USE_IDENTITY | BT_LE_ADV_OPT_CONNECTABLE, \
				  BT_GAP_ADV_SLOW_INT_MIN, \
				  BT_GAP_ADV_SLOW_INT_MAX, NULL)

static const struct bt_data ad[] = {
	BT_DATA_BYTES(BT_DATA_FLAGS, (BT_LE_AD_GENERAL | BT_LE_AD_NO_BREDR)),
	BT_DATA_BYTES(BT_DATA_UUID128_ALL, BT_UUID_CUSTOM_SERVICE_VAL),
	BT_DATA(BT_DATA_SVC_DATA16, mfg_data, ARRAY_SIZE(mfg_data)),
};

static uint8_t vnd_long_value[VND_LONG_MAX_LEN + 1] = {
		  'V', 'e', 'n', 'd', 'o', 'r', ' ', 'd', 'a', 't', 'a', '1',
		  'V', 'e', 'n', 'd', 'o', 'r', ' ', 'd', 'a', 't', 'a', '2',
		  'V', 'e', 'n', 'd', 'o', 'r', ' ', 'd', 'a', 't', 'a', '3',
		  'V', 'e', 'n', 'd', 'o', 'r', ' ', 'd', 'a', 't', 'a', '4',
		  'V', 'e', 'n', 'd', 'o', 'r', ' ', 'd', 'a', 't', 'a', '5',
		  'V', 'e', 'n', 'd', 'o', 'r', ' ', 'd', 'a', 't', 'a', '6',
		  '.', ' ' };

/*Cálculo do checksum*/
void CRC(char command)
{
	Epaper_Write_Data(command);	
	char polynomial = 0x07;
	csum = csum ^ command;

	for(uint8_t i = 0; i <= 7; i++)
		csum = (csum << 1) ^ ((csum & 0x80) ? polynomial : 0x00);
}


void parse_json(uint16_t len)
{
	int i = 0;

	if(esl_data.image_data.image_recive != 0x31 && esl_data.image_data.image_recive != 0x30) // 0x49 representa 1 em hexa
	{
		// Inicializa os valores a partir dos dados recebidos.
		esl_data.image_data.image_recive = vnd_long_value[i++];
		esl_data.image_data.image_compress = vnd_long_value[i++];
		esl_data.checksum = vnd_long_value[i++];

		// Verifica se será recebida a imagem e se ela está no formato comprimida
		if(esl_data.image_data.image_recive == 0x31 && esl_data.image_data.image_compress == 0x31)
		{
			esl_data.image_data.image_compact.number = vnd_long_value[i++];
					
			// Carrega os valores da compressão 
			for (uint8_t k = 0; k < esl_data.image_data.image_compact.number; k++)
			{
				esl_data.image_data.image_compact.pos[k] = vnd_long_value[i++];
				esl_data.image_data.image_compact.rep[k] = vnd_long_value[i++];
			}
		}
	}

	// Verifica se será recebida a imagem 
	if(esl_data.image_data.image_recive == 0x31)
	{
		// Verifica se já começou o envio e inicializa o display
		if(esl_data.image_data.image_pos == 0)
		{
			gpio_pin_set_dt(&EPEN, HIGH);

			EPD_HW_Init(); // Electronic paper initialization  

			// Inicializa o recebimento do branco e preto
			Epaper_Write_Command(0x24);
		}
		
		if(esl_data.image_data.image_pos == ALLSCREEN_GRAGHBYTES)
		{
			// Altera o tipo da imagem para receber o vermelho 
		 	Epaper_Write_Command(0x26);
		}

		// Percorre os dados que chegaram via bluetooth
		while(i < len)
		{	
			// Verifica se a imagem está comprimida 
			if(esl_data.image_data.image_compress && pos < esl_data.image_data.image_compact.number)
			{	
				if(esl_data.image_data.image_pos == esl_data.image_data.image_compact.pos[pos])
				{
					// Percorre as posições da compressão da imagem
					for(uint8_t j = 0; j < esl_data.image_data.image_compact.rep[pos]; j++)
					{
						// Acumula no checksum
						CRC(vnd_long_value[i]);	
					}

					count += esl_data.image_data.image_compact.rep[pos];
					esl_data.image_data.image_pos ++;
					pos++;
					i++;
				}
			} 
			else
				// Acumula no checksum
				CRC(vnd_long_value[i++]);
			
			esl_data.image_data.image_pos ++;
		}
	} 
	// Caso não seja o envio de imagem
	else if(esl_data.image_data.image_recive == 0x30)
	{	
		//LED
		esl_data.led_data.led = vnd_long_value[i++] - 0x30;

		//TIME
		esl_data.led_data.time = (vnd_long_value[i++] - 0x30) * 1000 + (vnd_long_value[i++] - 0x30) * 100 + (vnd_long_value[i++] - 0x30) * 10 + vnd_long_value[i++] - 0x30;

		//REPEAT
		esl_data.led_data.repeat = vnd_long_value[i++] - 0x30;
	}


	if((esl_data.image_data.image_pos + count) >= (ALLSCREEN_GRAGHBYTES )) //(2 * ALLSCREEN_GRAGHBYTES) - 1
	{
		// if(csum == 0xa7)
		// 	gpio_pin_set_dt(&LED1, HIGH);
		
		// Checa se o valor calculado do checksum bate com o valor passado
		if(esl_data.checksum == csum)
		{
			// Atualiza o display
			EPD_Update();  

			EPD_DeepSleep(); // Enter deep sleep,Sleep instruction is necessary, please do not delete!!!
	
  			gpio_pin_set_dt(&EPEN, LOW);
		}
		else
		{   
			/*Checksum manual verify*/

			// for(unsigned char m = 200; m < csum; m++)
			// {
			// 	gpio_pin_set_dt(&LED0, HIGH);
			// 	k_msleep(1000);
			// 	gpio_pin_set_dt(&LED0, LOW);
			// 	k_msleep(1000);
			// }
			
			// Reinicia o display
			EPD_HW_Init();
		}

			// Reseta as variáveis 
			esl_data.image_data.image_pos = 0x00;
			esl_data.image_data.image_recive = 0x00;
			pos = 0;
			count = 0;
	}

	return;
}

// Convert int em array de bit
void int_to_bin_digit(unsigned int in, int count, int* out)
{
    unsigned int mask = 1U << (count-1);
    int i;
    for (i = 0; i < count; i++) {
        out[i] = (in & mask) ? 1 : 0;
        in <<= 1;
    }
}

/*LED blink function*/
void esl_led(uint16_t len)
{
	uint8_t count = 0;
	int led_bit[3];

	int_to_bin_digit(esl_data.led_data.led, 3, led_bit);   

	while(count < esl_data.led_data.repeat)
	{
		gpio_pin_set_dt(&LED0, led_bit[0] == 0 ? LOW : HIGH);
		gpio_pin_set_dt(&LED1, led_bit[1] == 0 ? LOW : HIGH);
		gpio_pin_set_dt(&LED2, led_bit[2] == 0 ? LOW : HIGH);

		k_msleep(esl_data.led_data.time);

		gpio_pin_set_dt(&LED0, LOW);
		gpio_pin_set_dt(&LED1, LOW);
		gpio_pin_set_dt(&LED2, LOW);

		k_msleep(esl_data.led_data.time);

		count++;
	}
}

/*Função de callback para o envio dos dados*/
static ssize_t write_long_vnd(struct bt_conn *conn, const struct bt_gatt_attr *attr, const void *buf, uint16_t len, uint16_t offset, uint8_t flags)
{
	uint8_t *value = attr->user_data;
	
	if (flags & BT_GATT_WRITE_FLAG_PREPARE) {
		return 0;
	}

	if (offset + len > VND_LONG_MAX_LEN) {
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
	}

	memcpy(value + offset, buf, len);
	value[offset + len] = 0;
	
	// Faz o decoder do json
	parse_json(len);

	//Verifica se foi passada a imagem
	if(esl_data.image_data.image_recive == 0x30)
		esl_led(len);

	return len;
}

/* Define os serviços contidos no BT e as funções de callback */
BT_GATT_SERVICE_DEFINE(vnd_svc,
	BT_GATT_PRIMARY_SERVICE(&vnd_uuid),
	BT_GATT_CHARACTERISTIC(&vnd_long_uuid.uuid, 
				BT_GATT_CHRC_WRITE | BT_GATT_CHRC_EXT_PROP,
			    BT_GATT_PERM_WRITE | BT_GATT_PERM_PREPARE_WRITE,
			    NULL, write_long_vnd, &vnd_long_value)
);
/*Instanciação das funções padrões do Bluetooth*/

void mtu_updated(struct bt_conn *conn, uint16_t tx, uint16_t rx)
{
	return;
	// printk("Updated MTU: TX: %d RX: %d bytes\n", tx, rx);
}

static struct bt_gatt_cb gatt_callbacks = {
	.att_mtu_updated = mtu_updated
};

static void connected(struct bt_conn *conn, uint8_t err)
{
	if (err) {
		// printk("Connection failed (err 0x%02x)\n", err);
		return;
	} 
	// else {
		// printk("Connected\n");
	// }
}

static void disconnected(struct bt_conn *conn, uint8_t reason)
{
	// printk("Disconnected (reason 0x%02x)\n", reason);
}

BT_CONN_CB_DEFINE(conn_callbacks) = {
	.connected = connected,
	.disconnected = disconnected,
};

/*Fim das instanciações*/

static void bt_ready(void)
{
	int err;
	if (IS_ENABLED(CONFIG_SETTINGS)) {
		settings_load();
	}

	err = bt_le_adv_start(ADV_PARAM, ad, ARRAY_SIZE(ad), NULL, 0);
	if (err) {
		return; // O erro não está sendo propagado para a main. /*Efetuar alterações*/
	}
}

int main()
{
	struct bt_gatt_attr *vnd_ind_attr;
	int err;

	epaperSetup(); // Chamada da função para inicialização dos pinos 
	//cleanDisplay();

	/*
		Inicialização do protocolo Bluetooth 
	*/
	err = bt_enable(NULL);
	if (err) {
		return 0; // Como não temos um printf, caso de erro ele sai da função e não atualizará mais o advertise 
	}

	// Inicializa o bluetooth 
	bt_ready();
	bt_gatt_cb_register(&gatt_callbacks);

	// Inicializa o serviços 
	vnd_ind_attr = bt_gatt_find_by_uuid(vnd_svc.attrs, vnd_svc.attr_count,
					    &vnd_enc_uuid.uuid);


	/*
		Essa parte da função tem como objetivo atualizar os dados emitidos pelo Advertise
	*/
	while(1)
	{		
		mfg_data[2] ++;
		err = bt_le_adv_update_data(ad, ARRAY_SIZE(ad), NULL, 0);
		k_msleep(5000);
	}

	return 0;
}
